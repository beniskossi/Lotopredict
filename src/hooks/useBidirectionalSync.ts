// Hook personnalis√© pour la synchronisation bidirectionnelle
import {useState, useEffect, useCallback} from 'react'
import BidirectionalSyncService from '@/services/bidirectionalSyncService'
import {useToast} from '@/hooks/use-toast'
import type {SyncStatus, SyncConflict, SyncOperation} from '@/services/bidirectionalSyncService'

export function useBidirectionalSync() {
 const [status, setStatus] = useState<SyncStatus | null>(null)
 const [conflicts, setConflicts] = useState<SyncConflict[]>([])
 const [operations, setOperations] = useState<SyncOperation[]>([])
 const [isInitialized, setIsInitialized] = useState(false)
 const {toast} = useToast()

 const syncService = BidirectionalSyncService.getInstance()

 // Initialiser le service
 useEffect(() => {
  const initialize = async () => {
   try {
    await syncService.startBidirectionalSync()
    setIsInitialized(true)
    
    toast({
     title: 'üîÑ Synchronisation Activ√©e',
     description: 'Synchronisation bidirectionnelle automatique d√©marr√©e',
     duration: 3000
    })
   } catch (error) {
    console.error('Erreur initialisation sync:', error)
    toast({
     title: '‚ùå Erreur Synchronisation',
     description: 'Impossible de d√©marrer la synchronisation automatique',
     variant: 'destructive'
    })
   }
  }

  initialize()

  // Nettoyer au d√©montage
  return () => {
   syncService.stopBidirectionalSync()
  }
 }, [])

 // S'abonner aux changements de statut
 useEffect(() => {
  const unsubscribe = syncService.subscribe((newStatus) => {
   setStatus(newStatus)
   
   // Mettre √† jour les conflits et op√©rations
   setConflicts(syncService.getConflicts())
   setOperations(syncService.getOperations())

   // Notifications pour √©v√©nements importants
   if (newStatus.conflictsDetected > 0 && conflicts.length === 0) {
    toast({
     title: '‚ö†Ô∏è Conflits D√©tect√©s',
     description: `${newStatus.conflictsDetected} conflit(s) de donn√©es n√©cessitent une attention`,
     variant: 'destructive',
     duration: 0 // Persistent
    })
   }

   if (newStatus.dataConsistency < 80 && newStatus.dataConsistency > 0) {
    toast({
     title: 'üîß Coh√©rence D√©grad√©e',
     description: `Coh√©rence des donn√©es: ${newStatus.dataConsistency}%`,
     variant: 'destructive'
    })
   }
  })

  return unsubscribe
 }, [conflicts.length])

 // Forcer une synchronisation
 const forceSync = useCallback(async () => {
  try {
   await syncService.forceBidirectionalSync()
   toast({
    title: '‚úÖ Synchronisation Forc√©e',
    description: 'Synchronisation compl√®te termin√©e avec succ√®s'
   })
  } catch (error) {
   toast({
    title: '‚ùå Erreur Synchronisation',
    description: '√âchec de la synchronisation forc√©e',
    variant: 'destructive'
   })
  }
 }, [])

 // R√©soudre un conflit manuellement
 const resolveConflict = useCallback(async (
  conflictId: string, 
  resolution: 'prefer_local' | 'prefer_remote' | 'merge'
 ) => {
  try {
   await syncService.resolveConflictManually(conflictId, resolution)
   toast({
    title: '‚úÖ Conflit R√©solu',
    description: `Conflit r√©solu en faveur de: ${resolution.replace('prefer_', '')}`
   })
  } catch (error) {
   toast({
    title: '‚ùå Erreur R√©solution',
    description: 'Impossible de r√©soudre le conflit',
    variant: 'destructive'
   })
  }
 }, [])

 // Mettre √† jour la configuration
 const updateConfig = useCallback((config: any) => {
  syncService.updateConfig(config)
  toast({
   title: '‚öôÔ∏è Configuration Mise √† Jour',
   description: 'Param√®tres de synchronisation modifi√©s'
  })
 }, [])

 // Obtenir les diagnostics
 const getDiagnostics = useCallback(async () => {
  return await syncService.getDiagnostics()
 }, [])

 // Red√©marrer la synchronisation
 const restartSync = useCallback(async () => {
  try {
   await syncService.stopBidirectionalSync()
   await syncService.startBidirectionalSync()
   toast({
    title: 'üîÑ Synchronisation Red√©marr√©e',
    description: 'Service de synchronisation red√©marr√© avec succ√®s'
   })
  } catch (error) {
   toast({
    title: '‚ùå Erreur Red√©marrage',
    description: 'Impossible de red√©marrer la synchronisation',
    variant: 'destructive'
   })
  }
 }, [])

 return {
  // √âtat
  status,
  conflicts,
  operations,
  isInitialized,
  
  // Actions
  forceSync,
  resolveConflict,
  updateConfig,
  getDiagnostics,
  restartSync,
  
  // Statut computed
  isActive: status?.isActive || false,
  connectionQuality: status?.connectionQuality || 'offline',
  dataConsistency: status?.dataConsistency || 0,
  hasConflicts: conflicts.length > 0,
  pendingOperations: status?.pendingOperations || 0
 }
}
